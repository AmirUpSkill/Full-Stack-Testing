package com.amir.testing.service;

// JUnit 5 Imports
import org.junit.jupiter.api.Test; // Marks a method as a test case
import org.junit.jupiter.api.extension.ExtendWith; // Enables JUnit extensions like Mockito

// Mockito Imports
import org.mockito.InjectMocks; // Injects mocks into the fields of the annotated class
import org.mockito.Mock; // Creates a mock object for the annotated field
import org.mockito.junit.jupiter.MockitoExtension; // The Mockito extension for JUnit 5
import static org.mockito.Mockito.*; // Static methods like when(), verify(), any()
import static org.junit.jupiter.api.Assertions.*; // Static methods like assertThrows()

// AssertJ Imports (for fluent assertions)
import static org.assertj.core.api.Assertions.*; // Static methods like assertThat()

// Your Project Class Imports
import com.amir.testing.dto.CreateTodoDto;
import com.amir.testing.dto.TodoDto;
import com.amir.testing.entity.Todo;
import com.amir.testing.exception.ResourceNotFoundException;
import com.amir.testing.repository.TodoRepository;

// Other Java Imports
import java.util.Optional;
import java.util.UUID;


@ExtendWith(MockitoExtension.class) // 1. Enable Mockito integration with JUnit 5
class TodoServiceTest { // Default visibility is fine for test classes

    @Mock // 2. Create a mock instance of TodoRepository
    private TodoRepository todoRepository;

    @InjectMocks // 3. Create an instance of TodoServiceImpl and inject the mocks (todoRepository) into it
    private TodoServiceImpl todoService;

    // --- Test Method 1: Happy Path for Create ---
    @Test
    void shouldCreateTodoSuccessfully() {
        // Arrange (Set up the test scenario and mock behavior)
        // 1. Input data for the service method
        CreateTodoDto inputDto = new CreateTodoDto();
        inputDto.setDescription("Learn Unit Testing"); // Use setter if generated by Lombok, or a constructor if available

        // 2. Define what the repository.save() method should return when called
        UUID expectedId = UUID.randomUUID();
        Todo todoToSave = new Todo(); // This represents the object *before* saving (no ID yet)
        todoToSave.setDescription("Learn Unit Testing");
        // IMPORTANT: When mocking 'save', we usually care about the *result* after saving.
        Todo savedTodoEntity = new Todo(expectedId, "Learn Unit Testing", false); // Entity *after* save

        // 3. Configure the mock repository: "When save is called with any Todo object, return our predefined savedTodoEntity"
        when(todoRepository.save(any(Todo.class))).thenReturn(savedTodoEntity);
        // We use any(Todo.class) because we don't have the exact instance created inside the service method.

        // Act (Execute the method under test)
        TodoDto resultDto = todoService.createTodo(inputDto);

        // Assert (Verify the results and interactions)
        // 1. Check the returned DTO is not null
        assertThat(resultDto).isNotNull();
        // 2. Check the fields of the returned DTO match expectations
        assertThat(resultDto.getId()).isEqualTo(expectedId);
        assertThat(resultDto.getDescription()).isEqualTo("Learn Unit Testing");
        assertThat(resultDto.isCompleted()).isFalse(); // Should default to false

        // 3. Verify that the todoRepository.save() method was actually called exactly once with any Todo object
        verify(todoRepository, times(1)).save(any(Todo.class));
        // Alternatively: verify(todoRepository).save(any(Todo.class)); // times(1) is the default

        // Optional: Verify no other interactions happened with this mock (if needed)
        // verifyNoMoreInteractions(todoRepository);
    }

    // --- Test Method 2: Error Path for Get By ID ---
    @Test
    void shouldThrowResourceNotFoundException_whenTodoNotFound() {
        // Arrange (Set up the test scenario and mock behavior)
        // 1. Define an ID that supposedly doesn't exist
        UUID nonExistentId = UUID.randomUUID();

        // 2. Configure the mock repository: "When findById is called with this ID, return an empty Optional"
        when(todoRepository.findById(nonExistentId)).thenReturn(Optional.empty());

        // Act & Assert (Execute the method and verify the expected exception is thrown)
        // 1. Assert that calling getTodoById with the non-existent ID throws the correct exception
        ResourceNotFoundException exception = assertThrows(
            ResourceNotFoundException.class, // Expected exception type
            () -> todoService.getTodoById(nonExistentId) // The code that should throw the exception
        );

        // 2. Optional: Assert that the exception message is informative
        assertThat(exception.getMessage()).contains("Todo not found with id: " + nonExistentId);

        // 3. Verify that the todoRepository.findById() method was actually called exactly once with the specific ID
        verify(todoRepository, times(1)).findById(nonExistentId);

        // Optional: Verify no other interactions happened (e.g., save was not called)
        // verifyNoMoreInteractions(todoRepository);
    }

    // --- Other test methods for getAllTodos, getTodoById (success), updateTodo, deleteTodoById will go here ---

}